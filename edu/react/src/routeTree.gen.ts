/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './pages/__root'
import { Route as FrontRouteImport } from './pages/_front/route'
import { Route as IndexImport } from './pages/index'
import { Route as FrontTopicImport } from './pages/_front/topic'
import { Route as FrontChapterIndexImport } from './pages/_front/chapter/index'
import { Route as FrontLessonSystemImport } from './pages/_front/lesson/system'
import { Route as FrontLessonProjectImport } from './pages/_front/lesson/project'
import { Route as FrontLessonIdImport } from './pages/_front/lesson/$id'
import { Route as FrontChapterIdImport } from './pages/_front/chapter/$id'

// Create/Update Routes

const FrontRouteRoute = FrontRouteImport.update({
  id: '/_front',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const FrontTopicRoute = FrontTopicImport.update({
  id: '/topic',
  path: '/topic',
  getParentRoute: () => FrontRouteRoute,
} as any)

const FrontChapterIndexRoute = FrontChapterIndexImport.update({
  id: '/chapter/',
  path: '/chapter/',
  getParentRoute: () => FrontRouteRoute,
} as any)

const FrontLessonSystemRoute = FrontLessonSystemImport.update({
  id: '/lesson/system',
  path: '/lesson/system',
  getParentRoute: () => FrontRouteRoute,
} as any)

const FrontLessonProjectRoute = FrontLessonProjectImport.update({
  id: '/lesson/project',
  path: '/lesson/project',
  getParentRoute: () => FrontRouteRoute,
} as any)

const FrontLessonIdRoute = FrontLessonIdImport.update({
  id: '/lesson/$id',
  path: '/lesson/$id',
  getParentRoute: () => FrontRouteRoute,
} as any)

const FrontChapterIdRoute = FrontChapterIdImport.update({
  id: '/chapter/$id',
  path: '/chapter/$id',
  getParentRoute: () => FrontRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_front': {
      id: '/_front'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof FrontRouteImport
      parentRoute: typeof rootRoute
    }
    '/_front/topic': {
      id: '/_front/topic'
      path: '/topic'
      fullPath: '/topic'
      preLoaderRoute: typeof FrontTopicImport
      parentRoute: typeof FrontRouteImport
    }
    '/_front/chapter/$id': {
      id: '/_front/chapter/$id'
      path: '/chapter/$id'
      fullPath: '/chapter/$id'
      preLoaderRoute: typeof FrontChapterIdImport
      parentRoute: typeof FrontRouteImport
    }
    '/_front/lesson/$id': {
      id: '/_front/lesson/$id'
      path: '/lesson/$id'
      fullPath: '/lesson/$id'
      preLoaderRoute: typeof FrontLessonIdImport
      parentRoute: typeof FrontRouteImport
    }
    '/_front/lesson/project': {
      id: '/_front/lesson/project'
      path: '/lesson/project'
      fullPath: '/lesson/project'
      preLoaderRoute: typeof FrontLessonProjectImport
      parentRoute: typeof FrontRouteImport
    }
    '/_front/lesson/system': {
      id: '/_front/lesson/system'
      path: '/lesson/system'
      fullPath: '/lesson/system'
      preLoaderRoute: typeof FrontLessonSystemImport
      parentRoute: typeof FrontRouteImport
    }
    '/_front/chapter/': {
      id: '/_front/chapter/'
      path: '/chapter'
      fullPath: '/chapter'
      preLoaderRoute: typeof FrontChapterIndexImport
      parentRoute: typeof FrontRouteImport
    }
  }
}

// Create and export the route tree

interface FrontRouteRouteChildren {
  FrontTopicRoute: typeof FrontTopicRoute
  FrontChapterIdRoute: typeof FrontChapterIdRoute
  FrontLessonIdRoute: typeof FrontLessonIdRoute
  FrontLessonProjectRoute: typeof FrontLessonProjectRoute
  FrontLessonSystemRoute: typeof FrontLessonSystemRoute
  FrontChapterIndexRoute: typeof FrontChapterIndexRoute
}

const FrontRouteRouteChildren: FrontRouteRouteChildren = {
  FrontTopicRoute: FrontTopicRoute,
  FrontChapterIdRoute: FrontChapterIdRoute,
  FrontLessonIdRoute: FrontLessonIdRoute,
  FrontLessonProjectRoute: FrontLessonProjectRoute,
  FrontLessonSystemRoute: FrontLessonSystemRoute,
  FrontChapterIndexRoute: FrontChapterIndexRoute,
}

const FrontRouteRouteWithChildren = FrontRouteRoute._addFileChildren(
  FrontRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof FrontRouteRouteWithChildren
  '/topic': typeof FrontTopicRoute
  '/chapter/$id': typeof FrontChapterIdRoute
  '/lesson/$id': typeof FrontLessonIdRoute
  '/lesson/project': typeof FrontLessonProjectRoute
  '/lesson/system': typeof FrontLessonSystemRoute
  '/chapter': typeof FrontChapterIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof FrontRouteRouteWithChildren
  '/topic': typeof FrontTopicRoute
  '/chapter/$id': typeof FrontChapterIdRoute
  '/lesson/$id': typeof FrontLessonIdRoute
  '/lesson/project': typeof FrontLessonProjectRoute
  '/lesson/system': typeof FrontLessonSystemRoute
  '/chapter': typeof FrontChapterIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_front': typeof FrontRouteRouteWithChildren
  '/_front/topic': typeof FrontTopicRoute
  '/_front/chapter/$id': typeof FrontChapterIdRoute
  '/_front/lesson/$id': typeof FrontLessonIdRoute
  '/_front/lesson/project': typeof FrontLessonProjectRoute
  '/_front/lesson/system': typeof FrontLessonSystemRoute
  '/_front/chapter/': typeof FrontChapterIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/topic'
    | '/chapter/$id'
    | '/lesson/$id'
    | '/lesson/project'
    | '/lesson/system'
    | '/chapter'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/topic'
    | '/chapter/$id'
    | '/lesson/$id'
    | '/lesson/project'
    | '/lesson/system'
    | '/chapter'
  id:
    | '__root__'
    | '/'
    | '/_front'
    | '/_front/topic'
    | '/_front/chapter/$id'
    | '/_front/lesson/$id'
    | '/_front/lesson/project'
    | '/_front/lesson/system'
    | '/_front/chapter/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  FrontRouteRoute: typeof FrontRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  FrontRouteRoute: FrontRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_front"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_front": {
      "filePath": "_front/route.tsx",
      "children": [
        "/_front/topic",
        "/_front/chapter/$id",
        "/_front/lesson/$id",
        "/_front/lesson/project",
        "/_front/lesson/system",
        "/_front/chapter/"
      ]
    },
    "/_front/topic": {
      "filePath": "_front/topic.tsx",
      "parent": "/_front"
    },
    "/_front/chapter/$id": {
      "filePath": "_front/chapter/$id.tsx",
      "parent": "/_front"
    },
    "/_front/lesson/$id": {
      "filePath": "_front/lesson/$id.tsx",
      "parent": "/_front"
    },
    "/_front/lesson/project": {
      "filePath": "_front/lesson/project.tsx",
      "parent": "/_front"
    },
    "/_front/lesson/system": {
      "filePath": "_front/lesson/system.tsx",
      "parent": "/_front"
    },
    "/_front/chapter/": {
      "filePath": "_front/chapter/index.tsx",
      "parent": "/_front"
    }
  }
}
ROUTE_MANIFEST_END */
